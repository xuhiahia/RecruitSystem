package com.fzy.project.ws;


import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.date.DateUtil;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.fzy.project.common.ErrorCode;
import com.fzy.project.exception.BusinessException;
import com.fzy.project.model.dto.ws.MessageRequest;
import com.fzy.project.model.entity.ChatList;
import com.fzy.project.model.entity.ChatMessage;
import com.fzy.project.model.entity.User;
import com.fzy.project.model.entity.UserChat;
import com.fzy.project.model.vo.MessageVO;
import com.fzy.project.service.ChatListService;
import com.fzy.project.service.ChatMessageService;
import com.fzy.project.service.UserChatService;
import com.fzy.project.service.UserService;
import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import javax.websocket.OnClose;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.PathParam;
import javax.websocket.server.ServerEndpoint;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CopyOnWriteArraySet;

import static com.fzy.project.constant.UserConstant.ALIVE;
import static com.fzy.project.constant.UserConstant.DONE;
import static java.awt.SystemColor.text;

@Slf4j
@Component
@ServerEndpoint(value = "/chat/{userChatId}")
public class WebSocket {

    //线程安全的无序集合
    private static final CopyOnWriteArraySet<Session> SESSIONS = new CopyOnWriteArraySet<>();
    //存储连接
    private static final Map<String, Session> SESSION_POOL = new HashMap<>(0);

    private static ChatListService chatListService;

    private static UserChatService userChatService;

    private static ChatMessageService chatMessageService;

    private static UserService userService;
    //存储当前消息
    private Session session;

    /**
     * 初始化service
     * @param chatListService
     */
    @Resource
    public void setHeatMapService(ChatListService chatListService) {
        WebSocket.chatListService = chatListService;
    }

    @Resource
    public void setHeatMapService(UserChatService userChatService) {
        WebSocket.userChatService = userChatService;
    }
    @Resource
    public void setHeatMapService(ChatMessageService chatMessageService) {
        WebSocket.chatMessageService = chatMessageService;
    }
    @Resource
    public void setHeatMapService(UserService userService) {
        WebSocket.userService = userService;
    }
    /**
     * 建立连接的时候
     * @param session
     */
    @OnOpen
    public void onOpen(Session session, @PathParam(value="userChatId")String userChatId) {
        try {
            if (StringUtils.isBlank(userChatId) || "undefined".equals(userChatId)) {
                throw new BusinessException(ErrorCode.PARAMS_ERROR);
            }
            this.session = session;
            SESSIONS.add(session);
            SESSION_POOL.put(userChatId, session);
            log.info("连接成功,连接id:{}", userChatId);
            changeStatus(userChatId,ALIVE);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 连接断开的时候
     */
    @OnClose
    public void onClose(Session session, @PathParam(value="userChatId")String userChatId) {
        try {
                if (!SESSION_POOL.isEmpty()) {
                    SESSION_POOL.remove(userChatId);
                    SESSIONS.remove(session);
                }
                log.info("连接断开：聊天id：{}",userChatId);
                changeStatus(userChatId,DONE); //用户不在当前聊天窗口
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 发送消息的时候
     * @param message
     */
    @OnMessage
    public void onMessage(String message,@PathParam("userChatId")String userChatId){ //接收者的聊天id

//        MessageRequest messageRequest = new Gson().fromJson(message, MessageRequest.class);
//        Long userChatId1 = messageRequest.getUserChatId();
//        Long toId = messageRequest.get();
//        Long teamId = messageRequest.getTeamId();
//        String text = messageRequest.getText();
//          User fromUser = userService.getById(userId);
        UserChat chat = userChatService.getById(Long.parseLong(userChatId));
        UserChat one = userChatService.getOne(new QueryWrapper<UserChat>().eq("send_user", chat.getReceiveUser()).eq("receive_user", chat.getReceiveUser()));
        privateChat(one.getId().toString(),message);

    }


    /**
     * 修改用户是否在聊天窗口的状态
     * @param userChatId
     * @param status
     */
    private void changeStatus(String userChatId,Integer status){
        long chatId = Long.parseLong(userChatId);
        ChatList chat = chatListService.getOne(new QueryWrapper<ChatList>().eq("user_chat_id", chatId));
        chat.setSendWindow(status);
        chatListService.updateById(chat);
        Long sendUser = chat.getSendUser();
        Long receiveUser = chat.getReceiveUser();
        ChatList one = chatListService.getOne(new QueryWrapper<ChatList>().eq("send_user", receiveUser).eq("receive_user", sendUser));
        one.setReceiveWindow(status);
    }


    /**
     * 发送单点消息
     * @param userChatId
     * @param message
     */
    public void sendOneMessage(String userChatId, String message) { //这里的userChatId是接收者
        long chatId = Long.parseLong(userChatId);
        ChatList chatList = chatListService.getOne(new QueryWrapper<ChatList>().eq("user_chat_id", chatId));
        Long sendUser = chatList.getSendUser();
        Long receiveUser = chatList.getReceiveUser();
        Session session = SESSION_POOL.get(chatList);
        if (session != null && session.isOpen()) {
            try {
                synchronized (session) {
                    log.info("【WebSocket消息】单点消息：" + message);
                    session.getAsyncRemote().sendText(message);
                    //判断接收的人在不在聊天框，如果不在，就加未读数
                    if(chatList.getSendWindow()==0){
                    chatListService.update().setSql("unread=unread+1").eq("send_user", sendUser).eq("receive_user", receiveUser).update();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 私聊
     * @param userChatId
     * @param messageContent
     */
    private void privateChat(String userChatId, String messageContent) {//userChatId是接收者的聊天id
        savaChat(userChatId,messageContent);
        long chatId = Long.parseLong(userChatId);
        UserChat chat = userChatService.getOne(new QueryWrapper<UserChat>().eq("id", chatId));
//        UserChat one = userChatService.getOne(new QueryWrapper<UserChat>().eq("send_user", chat.getReceiveUser()).eq("receive_user", chat.getSendUser()));
        Session toSession = SESSION_POOL.get(chat.getId().toString());
        if (toSession != null) {
            MessageVO messageVO = new MessageVO();
            setMessage(messageVO,chatId);
            String toJson = new Gson().toJson(messageVO);
            sendOneMessage(chat.getId().toString(), toJson);
            log.info("发送给用户username={}，消息：{}", messageVO.getReceiveName(), toJson);
        } else {
            log.info("发送失败");
        }
    }

    /**
     * 设置聊天视图
     * @param message
     * @param userChatId
     */
    private void setMessage(MessageVO message,Long userChatId){
        ChatMessage chatMessage = chatMessageService.getOne(new QueryWrapper<ChatMessage>().eq("user_chat_id", userChatId));
        message.setChatContent(chatMessage.getChatContent());
        message.setCreateTime(DateUtil.formatTime(chatMessage.getCreateTime()));
        Long sendUserId = chatMessage.getSendUser();
        Long receiveUserId = chatMessage.getReceiveUser();
        User sendUser = userService.getById(sendUserId); //接收者
        User receiveUser = userService.getById(receiveUserId); //发送者
        message.setSendName(receiveUser.getUserName());
        message.setSendAvatar(receiveUser.getAvatarUrl());
        message.setReceiveName(sendUser.getUserName());
        message.setReceiveAvatar(sendUser.getAvatarUrl());
    }

    /**
     * 保存聊天记录
     * @param userChatId
     * @param messageContent
     */
    private void savaChat(String userChatId, String messageContent) { //被接受的id
        long chatId = Long.parseLong(userChatId);
        UserChat chat = userChatService.getById(chatId);
        ChatMessage chatMessage = new ChatMessage();

        chatMessage.setChatContent(messageContent);
        chatMessage.setUserChatId(chatId);
        chatMessage.setSendUser(chat.getReceiveUser());
        chatMessage.setReceiveUser(chat.getSendUser());

//        BeanUtil.copyProperties(chat,chatMessage,"createTime","updateTime");
//        if (toId != null && toId > 0) {
//            chat.setToId(toId);
//        }
//        if (teamId != null && teamId > 0) {
//            chat.setTeamId(teamId);
//        }
        chatMessageService.save(chatMessage);
    }

}
